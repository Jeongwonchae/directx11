#include "Stdafx.h"
#include "InputClass.h"



InputClass::InputClass()
{
}

InputClass::InputClass(const InputClass &)
{
}


InputClass::~InputClass()
{
}

bool InputClass::Initialize(HINSTANCE hinstance, HWND hwnd, int screenWidth, int screenHeight)
{
	//마우스 커서의 위치 지정에 사용될 화면 크기를 설정
	m_screenWidth = screenWidth;
	m_screenHeight = screenHeight;

	//Direct Input 인터페이스 초기화
	HRESULT result = DirectInput8Create(hinstance, DIRECTINPUT_VERSION, IID_IDirectInput8, (void**)&m_directInput, NULL);
	if (FAILED(result))
	{
		return false;
	}

	//키보드의 Direct Input 인터페이스 생성
	result = m_directInput->CreateDevice(GUID_SysKeyboard, &m_keyboard, NULL);
	if (FAILED(result))
	{
		return false;
	}

	//데이터 형식으로 설정. 이 경우 키보드이므로 사전 정의 된 데이터 형식을 사용 할 수 있음
	result = m_keyboard->SetDataFormat(&c_dfDIKeyboard);
	if (FAILED(result))
	{
		return false;
	}

	//다른 프로그램과 공유하지 않도록 키보드의 협조 수준을 설정
	result = m_keyboard->SetCooperativeLevel(hwnd, DISCL_FOREGROUND | DISCL_EXCLUSIVE);
	if (FAILED(result))
	{
		return false;
	}

	//키보드를 할당
	result = m_keyboard->Acquire();
	if (FAILED(result))
	{
		return false;
	}

	//마우스 Direct Input 인터페이스 생성
	result = m_directInput->CreateDevice(GUID_SysMouse, &m_mouse, NULL);
	if (FAILED(result))
	{
		return false;
	}

	//미리 정의 된 마우스 데이터 형식을 사용하여 마우스의 데이터 형식을 설정
	result = m_mouse->SetDataFormat(&c_dfDIMouse);
	if (FAILED(result))
	{
		return false;
	}

	//다른 프로그램과 공유 할 수 있도록 마우스의 협력 수준을 설정
	result = m_mouse->SetCooperativeLevel(hwnd, DISCL_FOREGROUND | DISCL_NONEXCLUSIVE);
	if (FAILED(result))
	{
		return false;
	}

	//마우스를 할당
	result = m_mouse->Acquire();
	if (FAILED(result))
	{
		return false;
	}

	return true;
}

void InputClass::Shutdown()
{
	if (m_mouse)
	{
		m_mouse->Unacquire();
		m_mouse->Release();
		m_mouse = 0;
	}

	if (m_keyboard)
	{
		m_keyboard->Unacquire();
		m_keyboard->Release();
		m_keyboard = 0;
	}

	if (m_directInput)
	{
		m_directInput->Release();
		m_directInput = 0;
	}
}

bool InputClass::Frame()
{
	if (!ReadKeyboard())
	{
		return false;
	}

	if (!ReadMouse())
	{
		return false;
	}

	//키보드와 마우스의 변경상태를 처리
	ProcessInput();
	return true;
}

bool InputClass::IsEscapePressed()
{
	//escape 키가 현재 눌려지고 있는지 bit값을 계산하여 확인
	if (m_keyboardState[DIK_ESCAPE]&0x80)
	{
		return true;
	}
	return false;
}

void InputClass::GetMouseLocation(int &mouseX, int &mouseY)
{
	mouseX = m_mouseX;
	mouseY = m_mouseY;
}

bool InputClass::ReadKeyboard()
{
	//키보드 디바이스를 얻음
	HRESULT result = m_keyboard->GetDeviceState(sizeof(m_keyboardState), (LPVOID)&m_keyboardState);
	if (FAILED(result))
	{
		//키보드가 포커스를 잃었거나 획득되지 않은 경우 컨트롤을 다시 가져옴
		if ((result ==DIERR_INPUTLOST) || (result == DIERR_NOTACQUIRED))
		{
			m_keyboard->Acquire();
		}
		else
		{
			return false;
		}
	}
	return true;
}

bool InputClass::ReadMouse()
{
	//마우스 디바이스를 얻음
	HRESULT result = m_mouse->GetDeviceState(sizeof(DIMOUSESTATE), (LPVOID)&m_mouseState);
	if (FAILED(result))
	{
		//마우스가 포커스를 잃었거나 획득되지 않은 경우 컨트롤을 다시 가져옴
		if ((result ==DIERR_INPUTLOST) || (result == DIERR_NOTACQUIRED))
		{
			m_mouse->Acquire();
		}
		else
		{
			return false;
		}
	}
	return true;
}

void InputClass::ProcessInput()
{
	//프레임 동안 마우스 위치의 변경을 기반으로 마우스 커서의 위치를 업데이트
	m_mouseX += m_mouseState.lX;
	m_mouseY += m_mouseState.lY;

	//마우스 위치가 화면 너비 또는 높이를 초과하지 않는지 확인
	if (m_mouseX < 0) { m_mouseX = 0; }
	if (m_mouseY < 0) { m_mouseY = 0; }

	if (m_mouseX > m_screenWidth) { m_mouseX = m_screenWidth; }
	if (m_mouseY > m_screenHeight) { m_mouseY = m_screenHeight; }
}